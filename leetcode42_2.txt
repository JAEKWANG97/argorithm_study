height = [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1]
	for i in range(12)
		stack.append(i) , 0
		while stack and height[1] > height[0]: , while stack and 1 > 0:
			top = stack.pop() , top = 0
				if not len(stack):
				break
		stack.append(i) , 1
		stack.append(i) , 2
		while stack and height[3] > height[2]: , while stack and 2 > 0:
			top = stack.pop() , top = 2
			distance = i - stack[-1] -1 , 1 = 3 - 1 -1
			waters = min(height[i], height[stack[-1]]) - height[top] , 1 = 1 - 0
			volume += distance * waters , 0 += 1 * 1
		while stack and height[3] > height[1]: , while stack and 2 > 1:
			top = stack.pop() , top = 1
				if not len(stack):
				break
		stack.append(i) , 3
		stack.append(i) , 4
		stack.append(i) , 5
		while stack and height[6] > height[5]: , while stack and 1 > 0:
			top = stack.pop() , top = 5
			distance = i - stack[-1] -1 , 1 = 6 - 4 -1
			waters = min(height[i], height[stack[-1]]) - height[top] , 1 = 1 - 0
			volume += distance * waters , 1 += 1 * 1
		stack.append(i) , 6
		while stack and height[7] > height[6]: , while stack and 3 > 1:
			top = stack.pop() , top = 6
			distance = i - stack[-1] -1 , 2 = 7 - 4 -1
			waters = min(height[i], height[stack[-1]]) - height[top] , 0 = 1 - 1
			volume += distance * waters , 2 += 2 * 0
		while stack and height[7] > height[4]: , while stack and 3 > 1:
			top = stack.pop() , top = 4
			distance = i - stack[-1] -1 , 3 = 7 - 3 -1
			waters = min(height[i], height[stack[-1]]) - height[top] , 1 = 2 - 1
			volume += distance * waters , 2 += 3 * 1
		while stack and height[7] > height[3]: , while stack and 3 > 2:
			top = stack.pop() , top = 3
				if not len(stack):
				break
		stack.append(i) , 7
		stack.append(i) , 8
		stack.append(i) , 9
		while stack and height[10] > height[9]: , while stack and 2 > 1:
			top = stack.pop() , top = 9
			distance = i - stack[-1] -1 , 1 = 10 - 8 -1
			waters = min(height[i], height[stack[-1]]) - height[top] , 1 = 2 - 1
			volume += distance * waters , 5 += 1 * 1
		stack.append(i) , 10
		stack.append(i) , 11
	volume = 6
6
